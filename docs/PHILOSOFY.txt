Fast&Easy Web framework for Java.

Описание

FEW - микро-фреймворк для разработки веб приложений на Java.
Ключевыми особенностями фреймворка являются следующие фичи/идеи:
1. MVC 
  * Полная независимость уровней Модели и Контроллера друг от друга и от Представления. 
2. FreeMarker as template engine
  * Наверное, лучший шаблонизатор для Java.
3. Routing
  * Компонент, идеи которого были почёрпнуты из XScript и RoR. Позволяет гибко конфигурировать 
  URL'ы в вашем приложении, интегрируюя различные готовые MVC-компоненты.
4. Максимально компактный и лёгкий
  * few-core (<100Kb) имеет всего одну необходимую зависимость - FreeMarker (<1Mb).
5. Zero configurtion
  * Ни одного конфигурационного файла. Вся конфигурация фреймворка задаётся аннотациями и java-кодом
6. PRG
  * Мы используем шаблон Post-Redirect-Get. Все Get-запросы - не изменяют данные и могут кешироваться,
    все модификации данных производятся Post-запросами
7. REST
  * Пока не во всём, но фреймворк предполагает минимизацию сохранения данных в сессии и не содержит
 какого-либо сохранения состояния "Представления"
8. BEM
  * Для построения front-end кода предлагается использовать методологию BEM разработанную в Яндексе

Философия

FEW развивается в русле нескольких коммерческих проектов, вбирая в себя полезные наработки и идеи, 
  возникающие и требующиеся в этих проектах.
Идеи/требования сначала появляются в комерческом проекте и только потом перекочёвывает во FEW.
Никаких "академических" разработок.


Цели, лежащие в основе FEW:
1. Сделать разработку веб-проектов на Java такой же простой и легковесной как на php, но сохранить
  преймущества java-платформы: 
    широкие возможности по гибкой организации кода, обеспечению высокой модульности
    большую производительность, нежели PHP/Perl/NodeJS/XSLT и большинство других веб платформ
    большое колличество библиотек, доступных для Java-платформы.
2. Сделать платформу с Минимальными накладными расходами
    на создание/развёртывание нового проекта 
    на конфигурирование
    на реализацию нового функционала
    минимизировать объём исходников и библиотек, потребление CPU и RAM в run-time'е.
    минимизировать время рестарта сервера при разработке/отладке
    уменьшить стоимость необходимого хостинга (<5$)
3. Сосредоточение всей вёрстки на одном уровне абстракции (ftl). Ничего типа writer.println("<div>").
4. Предоставить удобную возможность отделения работ по вёрстке от программирования серверной части.
5. Обеспечить органичную возможность для реализации модулей/библиотек готового функционала для FEW


Ограничения, лежащие в основе FEW:
1. Предполагалось использование этого фреймворка для сравнительно небольших проектов. ~50 страниц с динамическим функционалом.
    Дальнейшее функциональное масштабирование не продумывалось т.к. пока не было таких задач.
    Для бОльших проектов есть большИе фреймворки. 


Проекты, близкие по концепции:
1. Наиболее близким по духу и целям является проект Stripes
2. Многие идеи почерпнуты из беглого знакомства с проектами Django, Ruby on Rails, Play! (routing) 
3. Из анализа опыта разработки на XScript была почерпнута идея того, что Представление 
  само определяет набор необходимых ему данных и ни коим образом не зависит от Контроллера
4. Из опыта работы с Primefaces утвердилась концепция по минимизации количества зависимостей. В идеале должен быть только один jar-файл.
5. Проекты, которые когда либо могут быть включены в зависимости FEW должны обладать следующими особенностями:
  * крайне желательно только один jar-файл небольшого размера <1Мб
  * отсутствие дополнительных зависимостей
  * открытый исходный код и свободная, не GPL лицензия
  Исходя из этих факторов, предпочтение отдаётся библиотекам, например, MyBatis и Guice вместо Hibernate и Spring.


Автор:
Гербылев Игорь 
                                  
Серьёзный вклад в разработку и становление идей этой библиотеки внесли 
Абдурахманов Абдула 
Ковалёв Филипп 
и наша совместная работа!

