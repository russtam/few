Fast&Easy Web framework for Java.

Описание

FEW - микро-фреймворк для разработки веб приложений на Java.
Ключевыми особенностями фреймворка являются следующие фичи/идеи:
1. MVC 
  * Полная независимость уровней Модели и Контроллера друг от друга и от Представления. 
2. FreeMarker as template engine
  * Такой же мощный как xSLT, такой же быстрый как JSP и такой же лёгкий в освоении как Velocity.
3. Routing
  * Компонент, идеи которого были почёрпнуты из XScript и RoR. Позволяет гибко конфигурировать 
  URL'ы в вашем приложении, интегрируюя различные готовые MVC-компоненты.
4. Максимально компактный и лёгкий
  * few-core (<100Kb) имеет всего одну необходимую зависимость - FreeMarker (<1Mb).
5. Zero configurtion
  * Ни одного конфигурационного файла. Вся конфигурация фреймворка задаётся аннотациями и java-кодом
6. PRG
  * Мы используем шаблон Post-Redirect-Get. Все Get-запросы - не изменяют данные и могут кешироваться,
    все модификации данных производятся Post-запросами

Философия

FEW развивается в русле нескольких коммерческих проектов, вбирая в себя полезные наработки и идеи, 
  возникающие и требующиеся этим проектам.
Идея/требование сначала появляется в комерческом проекте и только потом перекочёвывает в FEW.
Мы не делаем Фич ради Фич и "академических" разработок.


Цели, лежащие в основе FEW:
1. сделать разработку веб-проектов на Java такой же простой и легковесной как на php, но сохранить
  при этом прелести java-платформы: 
    широкие возможности по гибкой организации кода, обеспечению высокой модульности
    большую производительность, нежели PHP/Perl/NodeJS/XSLT и большинство других веб платформ
    большое колличество библиотек, доступных для Java-платформы.
2. сделать платформу с Минимальными непроизводительными накладными расходами
    на создание/развёртывание нового проекта на базе FEW
    на конфигурирование
    на реализацию нового функционала
    минимизировать объём дистрибутива, потребление CPU и RAM в run-time'е.
    минимизировать время рестарта сервера при разработке/отладке
    уменьшить стоимость необходимого хостинга (<5$)
3. сосредоточение всей вёрстки на одном уровне абстракции (ftl). Ничего типа writer.println("<div>").
    предполагается возможность разделения работ по программингу/вёрстке между двумя и более сотрудниками.
4. обеспечить органичную возможность для реализации модулей/библиотек готового функционала для FEW


Ограничения, лежащие в основе FEW:
1. Я предполагал использование этого фреймворка для сравнительно небольших проектов. ~50 функциональных веб-страниц.
    Дальнейшее функциональное масштабирование я не продумывал т.к. не было таких задач.
    Для бОльших проектов есть большИе фреймворки. 


Проекты, на которые мы похожи
1. Наиболее близким по духу и идеи проектом является Stripes, но мы многим отличаемся
2. От Django я взял философию разработки. (Платформа строиться по мере разработки боевых проектов)
3. Из Ruby On Rails (и Play!) я почерпнул идею компонента Routing, но переосмыслил(извратил) и упростил её. *
4. Из Primefaces я взял идею минимизации внешних зависимостей, в идеале должен быть только один jar-файл.
5. Из XScript я почерпнул идею того, что Представление само определяет, какие данные нужны ему для отображения.
6. Я стараюсь придерживаться стиля REST (пока не во всём). В этом хотелось бы быть похожими на Play, Apache Sling, RoR и другие..
7. Проекты, которые когда либо могут быть включены в зависимости FEW должны обладать следующими особенностями:
  крайне желательно только один jar-файл небольшого размера <1Мб
  отсутствие дополнительных зависимостей
  открытый исходный код и свободная, не GPL лицензия
Исходя из этих постулатов, я, например, выбрал проекты MyBatis и Guice вместо Hibernate и Spring
8. Совсем скоро мы попытаемся прикрутить методологию БЕМ к нашему движку.

* Разумеется, многие из этих идей я нашёл не на собственном опыте, а по подсказке коллег. За что большой им спасибо!
Серьёзный вклад в становление идей этой библиотеки внесли Абдурахманов Абдула и Ковалёв Филипп и наша совместная работа!
